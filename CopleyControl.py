#!/usr/bin/env python
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        CopleyControl.py
#
#  Project :     
#
# This file is part of Tango device class.
# 
# Tango is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tango is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tango.  If not, see <http://www.gnu.org/licenses/>.
# 
#
#  $Author :      nullSDD$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["CopleyControl", "CopleyControlClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(CopleyControl.additionnal_import) ENABLED START -----#
import time
import numpy
#----- PROTECTED REGION END -----#	//	CopleyControl.additionnal_import

# Device States Description
# No states for this device


class CopleyControl (PyTango.Device_4Impl):
    """"""
    
    # -------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(CopleyControl.global_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	CopleyControl.global_variables

    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        #CopleyControl.init_device(self)
        #----- PROTECTED REGION ID(CopleyControl.__init__) ENABLED START -----#
        self.name = name 
        CopleyControl.init_device(self)
        #----- PROTECTED REGION END -----#	//	CopleyControl.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(CopleyControl.delete_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	CopleyControl.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_Acceleration_read = 0.0
        self.attr_Deceleration_read = 0.0
        self.attr_Position_read = 0.0
        self.attr_SetPoint_read = 0.0
        self.attr_Velocity_read = 0.0
        self.attr_DialPosition_read = 0.0
        self.attr_Conversion_read = 0.0
        self.attr_SoftwareCwLimit_read = 0.0
        self.attr_SoftwareCcwLimit_read = 0.0
        self.attr_SoftwareCwDialLimit_read = 0.0
        self.attr_SoftwareCcwDialLimit_read = 0.0
        self.attr_HomeOffset_read = 0.0
        self.attr_CwLimit_read = False
        self.attr_CcwLimit_read = False
        self.attr_HomingMethod_read = 0.0
        #----- PROTECTED REGION ID(CopleyControl.init_device) ENABLED START -----#
        self.attr_Acceleration_read = 66800.0
        self.attr_Deceleration_read = 66800.0
        self.attr_Velocity_read = 166667.0
        self.attr_HomingMethod_read = 512
        self.attr_Conversion_read = 1.0
        self.dev_serial = self.connectSerial()         
        self.setInitParameters()
        #----- PROTECTED REGION END -----#	//	CopleyControl.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(CopleyControl.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	CopleyControl.always_executed_hook

    # -------------------------------------------------------------------------
    #    CopleyControl read/write attribute methods
    # -------------------------------------------------------------------------
    
    def read_Acceleration(self, attr):
        self.debug_stream("In read_Acceleration()")
        #----- PROTECTED REGION ID(CopleyControl.Acceleration_read) ENABLED START -----#
        #attr.set_value(self.attr_Acceleration_read)
        print "In ", self.get_name(), "::read_Acceleration()"
        command = self.getParameterCommand("0xcc")
        self.attr_Acceleration_read =  self.getValue(command)
        if self.attr_Acceleration_read != '':
            unit = 10
            acc = int(self.attr_Acceleration_read)* unit
            print("Read maximum acceleration: ", str(acc), "counts/(second*second)")
            conversion = 0.0025
            realAcceleration = int(self.attr_Acceleration_read)*conversion
            print("Read motor real maximum acceleration: ", realAcceleration, "counts/(second*second)")
            attr.set_value(int(self.attr_Acceleration_read))
        #----- PROTECTED REGION END -----#	//	CopleyControl.Acceleration_read
        
    def write_Acceleration(self, attr):
        self.debug_stream("In write_Acceleration()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(CopleyControl.Acceleration_write) ENABLED START -----#
        print "In ", self.get_name(), "::write_Acceleration()"
        #print "realAcceleration input is: ", int(data)
        #realAcceleration = int(data)
        #self.attr_Acceleration_read = realAcceleration*400
        self.attr_Acceleration_read = int(data)
        command = self.setParameterCommand("0xcc", str(int(self.attr_Acceleration_read)))
        self.write(command)
        unit = 10
        acc = int(data)* unit
        print("Set maximum acceleration to  ", str(acc), "counts/(second*second).")
        #----- PROTECTED REGION END -----#	//	CopleyControl.Acceleration_write
        
    def read_Deceleration(self, attr):
        self.debug_stream("In read_Deceleration()")
        #----- PROTECTED REGION ID(CopleyControl.Deceleration_read) ENABLED START -----#
        #attr.set_value(self.attr_Deceleration_read)
        print "In ", self.get_name(), "::read_Deceleration()"
        command = self.getParameterCommand("0xcd")
        self.attr_Deceleration_read =  self.getValue(command)
        if self.attr_Deceleration_read != '':
            unit = 10 
            dec = int(self.attr_Deceleration_read) * unit
            print("Read maximum deceleration: ", str(dec),  "counts/(second*second)")
            conversion = 0.0025
            realDeceleration = int(self.attr_Deceleration_read)*conversion
            print("Read motor real maximum deceleration: ", realDeceleration, "counts/(second*second)")
            #attr.set_value(int(realDeceleration))  
            attr.set_value(int(self.attr_Deceleration_read))  
        #----- PROTECTED REGION END -----#	//	CopleyControl.Deceleration_read
        
    def write_Deceleration(self, attr):
        self.debug_stream("In write_Deceleration()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(CopleyControl.Deceleration_write) ENABLED START -----#
        print "In ", self.get_name(), "::write_Deceleration()"
        #print "realDeceleration input is: ", int(data)
        #self.attr_Deceleration_read = int(data)*400
        self.attr_Deceleration_read = int(data)
        command = self.setParameterCommand("0xcd", str(int(self.attr_Deceleration_read)))
        self.write(command)
        unit = 10 
        dec = int(data)* unit
        print("Set maximum deceleration to  ", str(dec), "counts/(second*second).")
        #----- PROTECTED REGION END -----#	//	CopleyControl.Deceleration_write
        
    def read_Position(self, attr):
        self.debug_stream("In read_Position()")
        #----- PROTECTED REGION ID(CopleyControl.Position_read) ENABLED START -----#   
        print "In ", self.get_name(), "::read_Position()"
        command = self.getParameterCommand("0x2d")
        self.attr_Position_read =  self.getValue(command)
        if self.attr_Position_read != '':
            attr.set_value(int(self.attr_Position_read))        
        #----- PROTECTED REGION END -----#	//	CopleyControl.Position_read
        
    def write_Position(self, attr):
        self.debug_stream("In write_Position()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(CopleyControl.Position_write) ENABLED START -----#
        print "In ", self.get_name(), "::write_Position()"
        expected_position = int(data)
        self.attr_SetPoint_read = expected_position - int(self.attr_Position_read)
        if int(self.attr_SoftwareCcwLimit_read) == 0 and int(self.attr_SoftwareCcwLimit_read) == 0:
            print("Software Limits are not set.")
            command = self.setParameterCommand("0xca", str(int(expected_position - int(self.attr_Position_read))))
            self.write(command)
        elif expected_position in range(int(self.attr_SoftwareCcwLimit_read), int(self.attr_SoftwareCwLimit_read)):
            command = self.setParameterCommand("0xca", str(int(self.attr_SetPoint_read)))
            self.write(command)
        else:
            print("The input is out of the valid range, check the software limits. ")
            pass
        #----- PROTECTED REGION END -----#	//	CopleyControl.Position_write
        
    def read_SetPoint(self, attr):
        self.debug_stream("In read_SetPoint()")
        #----- PROTECTED REGION ID(CopleyControl.SetPoint_read) ENABLED START -----#
        print "In ", self.get_name(), "::read_SetPoint()"
        attr.set_value(int(self.attr_SetPoint_read)) 
      
        #----- PROTECTED REGION END -----#	//	CopleyControl.SetPoint_read
        
    def write_SetPoint(self, attr):
        self.debug_stream("In write_SetPoint()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(CopleyControl.SetPoint_write) ENABLED START -----#
        print "In ", self.get_name(), "::write_SetPoint()"
        current_position = self.getValue(str(self.NodeId) + " g r0x2d")
        expected_position = int(current_position) + int(data)
        print("expected Position is ", expected_position, "position is ", self.attr_Position_read, "input is ", data)
        print("SetPoint:", data, "expected position: ", expected_position, "Ccwlimit: ", self.attr_SoftwareCcwLimit_read, "Cwlimit: ", self.attr_SoftwareCwLimit_read)
        if expected_position in range(int(self.attr_SoftwareCcwLimit_read), int(self.attr_SoftwareCwLimit_read)):
            command = self.setParameterCommand("0xca", str(int(data)))
            self.write(command)
            self.attr_SetPoint_read = data 
            attr.set_value(self.attr_SetPoint_read)
        else:
            print("The input is out of range of the software limits")
            pass
        #----- PROTECTED REGION END -----#	//	CopleyControl.SetPoint_write
        
    def read_Velocity(self, attr):
        self.debug_stream("In read_Velocity()")
        #----- PROTECTED REGION ID(CopleyControl.Velocity_read) ENABLED START -----#
        print "In ", self.get_name(), "::read_Velocity()"
        command = self.getParameterCommand("0xcb")
        self.attr_Velocity_read =  self.getValue(command)
        unit = 0.1
        vel = int(self.attr_Velocity_read)*unit
        ustepsRev = 4000
        conversionVelocity = 60 * unit/ustepsRev 
        realVelocity = int((int(self.attr_Velocity_read) *conversionVelocity)) 
        print("Read maximum velocity: ", vel ,"counts/second.")
        print("Read motor real maximum velocity: ", realVelocity,"counts/second.")
        if self.attr_Velocity_read != '':
            attr.set_value(int(self.attr_Velocity_read))
        #----- PROTECTED REGION END -----#	//	CopleyControl.Velocity_read
        
    def write_Velocity(self, attr):
        self.debug_stream("In write_Velocity()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(CopleyControl.Velocity_write) ENABLED START -----#
        print "In ", self.get_name(), "::write_Velocity()"
        self.attr_Velocity_read = int(data)
        attr.set_value(self.attr_Velocity_read)
        command = self.setParameterCommand("0xcb ", str(int(data)))
        self.write(command)
        unit = 0.1
        vel = int(data)*unit
        print("Set maximum velocity to  ", str(vel), "counts/second.")
        #----- PROTECTED REGION END -----#	//	CopleyControl.Velocity_write
        
    def read_DialPosition(self, attr):
        self.debug_stream("In read_DialPosition()")
        #----- PROTECTED REGION ID(CopleyControl.DialPosition_read) ENABLED START -----#
        print "In ", self.get_name(), "::read_DialPosition()"
        attr.set_value(self.attr_DialPosition_read)
        command = self.getParameterCommand("0x2d")
        self.attr_Position_read =  self.getValue(command)
        self.attr_DialPosition_read = float(self.attr_Position_read) / float(self.attr_Conversion_read)
        attr.set_value(self.attr_DialPosition_read)
        #----- PROTECTED REGION END -----#	//	CopleyControl.DialPosition_read
        
    def write_DialPosition(self, attr):
        self.debug_stream("In write_DialPosition()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(CopleyControl.DialPosition_write) ENABLED START -----#
        print "In ", self.get_name(), "::write_DialPosition()"
        expected_position = float(self.attr_Conversion_read) * data        
        data_new = (data - self.attr_DialPosition_read) * float(self.attr_Conversion_read) 
        self.attr_SetPoint_read = (data - self.attr_DialPosition_read) * float(self.attr_Conversion_read) 
        if expected_position in range(int(self.attr_SoftwareCcwLimit_read), int(self.attr_SoftwareCwLimit_read)):
            command = self.setParameterCommand("0xca", str(int(data_new)))
            self.write(command)  
        else:
            print("DialPosition is out of range.")
            pass
        #----- PROTECTED REGION END -----#	//	CopleyControl.DialPosition_write
        
    def read_Conversion(self, attr):
        self.debug_stream("In read_Conversion()")
        #----- PROTECTED REGION ID(CopleyControl.Conversion_read) ENABLED START -----#
        print "In ", self.get_name(), "::read_Conversion()"
        attr.set_value(self.attr_Conversion_read)
        #----- PROTECTED REGION END -----#	//	CopleyControl.Conversion_read
        
    def write_Conversion(self, attr):
        self.debug_stream("In write_Conversion()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(CopleyControl.Conversion_write) ENABLED START -----#
        print "In ", self.get_name(), "::write_Conversion()"
        self.attr_Conversion_read = data
        #----- PROTECTED REGION END -----#	//	CopleyControl.Conversion_write
        
    def read_SoftwareCwLimit(self, attr):
        self.debug_stream("In read_SoftwareCwLimit()")
        #----- PROTECTED REGION ID(CopleyControl.SoftwareCwLimit_read) ENABLED START -----#
        print "In ", self.get_name(), "::read_SoftwareCwLimit()"
        command = self.getParameterCommand("0xb8")
        self.attr_SoftwareCwLimit_read =  self.getValue(command)
        attr.set_value(int(self.attr_SoftwareCwLimit_read))
        #----- PROTECTED REGION END -----#	//	CopleyControl.SoftwareCwLimit_read
        
    def write_SoftwareCwLimit(self, attr):
        self.debug_stream("In write_SoftwareCwLimit()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(CopleyControl.SoftwareCwLimit_write) ENABLED START -----#
        print "In ", self.get_name(), "::write_SoftwareCwLimit()"
        print("SoftwareCwLimit:", data, "current position: ", self.attr_Position_read, "Ccwlimit: ", self.attr_SoftwareCcwLimit_read, "Cwlimit: ", self.attr_SoftwareCwLimit_read)
        expected_position = int(self.attr_Position_read) + int(self.attr_SetPoint_read)
        if expected_position in range(int(self.attr_SoftwareCcwLimit_read), int(data)):
            self.attr_SoftwareCwLimit_read = data            
            command = self.setParameterCommand("0xb8", str(int(data)))
            self.write(command)
            attr.set_value(int(self.attr_SoftwareCwLimit_read)) 
        else:
            print("SoftwareCwLimit must be higher than current Position plus current SetPoint")
            pass
        #----- PROTECTED REGION END -----#	//	CopleyControl.SoftwareCwLimit_write
        
    def read_SoftwareCcwLimit(self, attr):
        self.debug_stream("In read_SoftwareCcwLimit()")
        #----- PROTECTED REGION ID(CopleyControl.SoftwareCcwLimit_read) ENABLED START -----#
        print "In ", self.get_name(), "::read_SoftwareCcwLimit()"
        command = self.getParameterCommand("0xb9")
        self.attr_SoftwareCcwLimit_read =  self.getValue(command)
        attr.set_value(int(self.attr_SoftwareCcwLimit_read))
        #----- PROTECTED REGION END -----#	//	CopleyControl.SoftwareCcwLimit_read
        
    def write_SoftwareCcwLimit(self, attr):
        self.debug_stream("In write_SoftwareCcwLimit()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(CopleyControl.SoftwareCcwLimit_write) ENABLED START -----#
        print "In ", self.get_name(), "::write_SoftwareCcwLimit()"
        expected_position = int(self.attr_Position_read) + int(self.attr_SetPoint_read)
        if int(data) < expected_position:      
            command = self.setParameterCommand("0xb9", str(int(data)))       
            self.write(command)     
            attr.set_value(int(data)) 
        else:
            print("SoftwareCcwLimit must be smaller than Position plus SetPoint")
            pass
        #----- PROTECTED REGION END -----#	//	CopleyControl.SoftwareCcwLimit_write
        
    def read_SoftwareCwDialLimit(self, attr):
        self.debug_stream("In read_SoftwareCwDialLimit()")
        #----- PROTECTED REGION ID(CopleyControl.SoftwareCwDialLimit_read) ENABLED START -----#
        print "In ", self.get_name(), "::read_SoftwareCwDialLimit()"
        self.attr_SoftwareCwDialLimit_read = float(self.attr_SoftwareCwLimit_read) / float(self.attr_Conversion_read)
        if self.attr_SoftwareCwDialLimit_read != '':
            attr.set_value(int(self.attr_SoftwareCwDialLimit_read))     
        #----- PROTECTED REGION END -----#	//	CopleyControl.SoftwareCwDialLimit_read
        
    def write_SoftwareCwDialLimit(self, attr):
        self.debug_stream("In write_SoftwareCwDialLimit()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(CopleyControl.SoftwareCwDialLimit_write) ENABLED START -----#
        print "In ", self.get_name(), "::write_SoftwareCwDialLimit()"
        data_new = float(self.attr_Conversion_read) * data
        self.attr_SoftwareCwLimit_read = data_new        
        self.attr_SoftwareCwDialLimit_read = data
        attr.set_value(data) 
        command = self.setParameterCommand("0xb8", int(self.attr_SoftwareCwLimit_read))    
        self.write(command)
        #----- PROTECTED REGION END -----#	//	CopleyControl.SoftwareCwDialLimit_write
        
    def read_SoftwareCcwDialLimit(self, attr):
        self.debug_stream("In read_SoftwareCcwDialLimit()")
        #----- PROTECTED REGION ID(CopleyControl.SoftwareCcwDialLimit_read) ENABLED START -----#
        print "In ", self.get_name(), "::read_SoftwareCcwDialLimit()"
        self.attr_SoftwareCcwDialLimit_read = float(self.attr_SoftwareCcwLimit_read) / float(self.attr_Conversion_read)
        if self.attr_SoftwareCcwLimit_read != '':
            attr.set_value(int(self.attr_SoftwareCcwDialLimit_read))    
        #----- PROTECTED REGION END -----#	//	CopleyControl.SoftwareCcwDialLimit_read
        
    def write_SoftwareCcwDialLimit(self, attr):
        self.debug_stream("In write_SoftwareCcwDialLimit()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(CopleyControl.SoftwareCcwDialLimit_write) ENABLED START -----#
        print "In ", self.get_name(), "::write_SoftwareCcwDialLimit()"
        attr.set_value(data) 
        data_new = float(self.attr_Conversion_read) * data
        self.attr_SoftwareCcwLimit_read = int(data_new)
        self.attr_SoftwareCcwDialLimit_read = data
        command = self.setParameterCommand("0xb9", int(self.attr_SoftwareCcwLimit_read))
        self.write(command)
        #attr.set_value(self.attr_SoftwareCcwDialLimit_read) 
        #----- PROTECTED REGION END -----#	//	CopleyControl.SoftwareCcwDialLimit_write
        
    def read_HomeOffset(self, attr):
        self.debug_stream("In read_HomeOffset()")
        #----- PROTECTED REGION ID(CopleyControl.HomeOffset_read) ENABLED START -----#
        print "In ", self.get_name(), "::read_HomeOffset()"     
        command = self.getParameterCommand("0xc6")
        self.attr_HomeOffset_read =  self.getValue(command)
        if self.attr_HomeOffset_read != '':
            attr.set_value(int(self.attr_HomeOffset_read))
        
        #----- PROTECTED REGION END -----#	//	CopleyControl.HomeOffset_read
        
    def write_HomeOffset(self, attr):
        self.debug_stream("In write_HomeOffset()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(CopleyControl.HomeOffset_write) ENABLED START -----#
        print "In ", self.get_name(), "::write_HomeOffset()"
        self.attr_HomeOffset_read = int(data)
        command = self.setParameterCommand("0xc6", str(int(self.attr_HomeOffset_read)))
        self.write(command)
       
        #----- PROTECTED REGION END -----#	//	CopleyControl.HomeOffset_write
        
    def read_CwLimit(self, attr):
        self.debug_stream("In read_CwLimit()")
        #----- PROTECTED REGION ID(CopleyControl.CwLimit_read) ENABLED START -----#  
        print "In ", self.get_name(), "::read_CwLimit()"
        self.clearLatchedStatus()
        value = self.readLatchedEventStatus()
        self.attr_CwLimit_read = (int(value)&512)<>0
        attr.set_value(self.attr_CwLimit_read)
        if self.attr_CwLimit_read: 
            print("Positive limit switche is active")   
            pass
        #----- PROTECTED REGION END -----#	//	CopleyControl.CwLimit_read
        
    def read_CcwLimit(self, attr):
        self.debug_stream("In read_CcwLimit()")
        #----- PROTECTED REGION ID(CopleyControl.CcwLimit_read) ENABLED START -----#  
        print "In ", self.get_name(), "::read_CcwLimit()"
        self.clearLatchedStatus()
        value = self.readLatchedEventStatus()
        self.attr_CcwLimit_read = (int(value)&1024)<>0
        attr.set_value(self.attr_CcwLimit_read)
        if self.attr_CcwLimit_read: 
            print("Negative limit switche is active")   
        else:
            pass
        #----- PROTECTED REGION END -----#	//	CopleyControl.CcwLimit_read
        
    def read_HomingMethod(self, attr):
        self.debug_stream("In read_HomingMethod()")
        #----- PROTECTED REGION ID(CopleyControl.HomingMethod_read) ENABLED START -----#
        #attr.set_value(self.attr_HomingMethod_read)
        command = self.getParameterCommand("0xc2")
        self.attr_HomingMethod_read =  self.getValue(command)
      
        if self.attr_HomingMethod_read != '':
            attr.set_value(int(self.attr_HomingMethod_read))
        #----- PROTECTED REGION END -----#	//	CopleyControl.HomingMethod_read
        
    def write_HomingMethod(self, attr):
        self.debug_stream("In write_HomingMethod()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(CopleyControl.HomingMethod_write) ENABLED START -----#
        HomeReferenceNrList = [512, 544, 560, 513, 529, 545, 561, 516, 532, 548, 564, 514, 530, 546, 562, 610, 626, 771, 787, 515, 531, 803, 819, 867, 883, 547, 563, 611, 627]
        if int(data) in HomeReferenceNrList:
            self.attr_HomingMethod_read = int(data)
            self.setHomeMethod(int(self.attr_HomingMethod_read))       
        else:
            print("Input HomeReferenceNr: {} is not valid.".format(data))
            pass
        #self.write(command)
        #----- PROTECTED REGION END -----#	//	CopleyControl.HomingMethod_write
        
    
    
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(CopleyControl.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	CopleyControl.read_attr_hardware


    # -------------------------------------------------------------------------
    #    CopleyControl command methods
    # -------------------------------------------------------------------------
    
    def dev_state(self):
        """ This command gets the device state (stored in its device_state data member) and returns it to the caller.
        :return: Device state
        :rtype: PyTango.CmdArgType.DevState
        """
        self.debug_stream("In dev_state()")
        argout = PyTango.DevState.UNKNOWN
        #----- PROTECTED REGION ID(CopleyControl.State) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	CopleyControl.State
        if argout != PyTango.DevState.ALARM:
            PyTango.Device_4Impl.dev_state(self)
        return self.get_state()
        
    def dev_status(self):
        """ This command gets the device status (stored in its device_status data member) and returns it to the caller.
        :return: Device status
        :rtype: PyTango.ConstDevString
        """
        self.debug_stream("In dev_status()")
        argout = ""
        #----- PROTECTED REGION ID(CopleyControl.Status) ENABLED START -----#
        command_DriveEventStatus = self.getParameterCommand("0xa0")
        DriveEventStatus = self.getValue(command_DriveEventStatus)
        #print "DriveEventStatus=", DriveEventStatus
        if DriveEventStatus == 'No power':
            argout = "Status is OFF, Power OFF"
        elif str(int(DriveEventStatus)) == '0':
            argout = "Status is STANDBY" 
        elif str(int(DriveEventStatus)) != '0' and str(int(DriveEventStatus)) != 'No power':
            self.clearLatchedStatus()
            value = int(self.readLatchedEventStatus())
            if int(value) == int(DriveEventStatus):
                if (value&512)<>0:
                    argout = "Positive limit switch Active" 
                    print("Positive limit switch active.(Bit 9 is 1)")
                elif (value&1024)<>0:
                    argout = "Negative limit switch Active" 
                    print("Negative limit switch active.(Bit 10 is 1)")
                elif (value&2048)<>0:
                    argout = "Status is STANDBY" 
                    print("Enable input not active.(Bit 11 is 1)")    
                elif (value&65536)<>0:
                    argout = "Status is STANDBY" 
                    print("Positive software limit condition.(Bit 16 is 1)")   
                elif (value&131072)<>0:
                    argout = "Status is STANDBY"
                    print("Negative software limit condition.(Bit 17 is 1)")
                elif (value&67108864)<>0:
                    argout = "Status is STANDBY" 
                    print("Home switch is active.(Bit 26 is 1)")
                elif (value&134217728)<>0:
                    argout = "Status is MOVING" 
                    print("Other problems occured.")
            else:
                argout = "Status is MOVING" 
                print("Status is MOVING")    
               
       
        else:
            argout = "Status is FAULT" 
        self.argout = argout
        #----- PROTECTED REGION END -----#	//	CopleyControl.Status
        self.set_status(self.argout)
        self.__status = PyTango.Device_4Impl.dev_status(self)
        return self.__status
        
    def StopMove(self):
        """ 
        """
        self.debug_stream("In StopMove()")
        #----- PROTECTED REGION ID(CopleyControl.StopMove) ENABLED START -----#
        self.write("{} t 0\n".format(str(self.NodeId)))
        #----- PROTECTED REGION END -----#	//	CopleyControl.StopMove
        
    def ResetMotor(self):
        """ 
        """
        self.debug_stream("In ResetMotor()")
        #----- PROTECTED REGION ID(CopleyControl.ResetMotor) ENABLED START -----#
        self.write("{} r\n".format(str(self.NodeId)))
        #----- PROTECTED REGION END -----#	//	CopleyControl.ResetMotor
        
    def WriteRead(self, argin):
        """ 
        :param argin: 
        :type argin: PyTango.DevString
        :rtype: PyTango.DevString
        """
        self.debug_stream("In WriteRead()")
        argout = ""
        #----- PROTECTED REGION ID(CopleyControl.WriteRead) ENABLED START -----#
        raw_result = ""
        print "In ", self.get_name(), "::::WriteRead()", str(argin)    
        dev = self.dev_serial       
        dev.Close()
        dev.Open()
        dev.Write(argin)
        start_time = time.clock()
        time.sleep(0.1)
        while (time.clock() - start_time) < 1:
            raw_result = dev.ReadLine()   
            if len(raw_result) > 0:
                pass
            else: 
                print("No power")
                return "No power"
            break
       
        while (raw_result[-1] == '\r' or raw_result[-1] == '\n'):
            raw_result = raw_result[0:-1] 
        b = numpy.ndarray.tolist(raw_result)
        for i in b:
            c = chr(i)
            argout = argout + c 
        #----- PROTECTED REGION END -----#	//	CopleyControl.WriteRead
        return argout
        
    def MoveToCwLimit(self):
        """ 
        :rtype: PyTango.DevLong
        """
        self.debug_stream("In MoveToCwLimit()")
        argout = 0
        #----- PROTECTED REGION ID(CopleyControl.MoveToCwLimit) ENABLED START -----#
        limitStatus = self.checkLimit()
        if limitStatus != 1:
            self.getValue(str(self.NodeId) + " s r0xc2 516")
            self.getValue(str(self.NodeId) + " t 2")
        else:
            print("Check Device State please.")
        #----- PROTECTED REGION END -----#	//	CopleyControl.MoveToCwLimit
        return argout
        
    def MoveToCcwLimit(self):
        """ 
        :rtype: PyTango.DevLong
        """
        self.debug_stream("In MoveToCcwLimit()")
        argout = 0
        #----- PROTECTED REGION ID(CopleyControl.MoveToCcwLimit) ENABLED START -----#
        limitStatus = self.checkLimit()
        if limitStatus != 2:
            self.getValue(str(self.NodeId) + " s r0xc2 532")
            self.getValue(str(self.NodeId) + " t 2")          
        else:
            print("Check Device State please.")
        #----- PROTECTED REGION END -----#	//	CopleyControl.MoveToCcwLimit
        return argout
        
    def MoveHome(self):
        """ 
        :rtype: PyTango.DevString
        """
        self.debug_stream("In MoveHome()")
        argout = ""
        #----- PROTECTED REGION ID(CopleyControl.MoveHome) ENABLED START -----#
        argout = self.getValue(str(self.NodeId) + " t 2")   
      
        #----- PROTECTED REGION END -----#	//	CopleyControl.MoveHome
        return argout
        
    def Move(self):
        """ 
        """
        self.debug_stream("In Move()")
        #----- PROTECTED REGION ID(CopleyControl.Move) ENABLED START -----#
        if self.attr_SetPoint_read == 0:
            print("The expected position is achieved.")
            pass
        elif int(self.attr_SoftwareCwLimit_read) == 0.0 and int(self.attr_SoftwareCwLimit_read) == 0.0:
            print("NO software limits are set.") 
            self.setMoveParameters()
            command_move = str(self.NodeId) +" t 1"
            self.getValue(str(command_move))
            
        else:
            status = str(self.dev_status())
           
            current_position = self.getValue(str(self.NodeId) + " g r0x2d") 
            expected_position = int(current_position) + int(self.attr_SetPoint_read)
            if status == "Status is STANDBY" or status == "Positive limit switch Active" or status == "Negative limit switch Active":
                if expected_position >= int(self.attr_SoftwareCcwLimit_read) and expected_position <= int(self.attr_SoftwareCwLimit_read):
                    print("The expected position position ", expected_position, " is among the range from ", int(self.attr_SoftwareCcwLimit_read), " to ", int(self.attr_SoftwareCwLimit_read))
                    self.setMoveParameters()
                    command_move = str(self.NodeId) +" t 1"
                    self.getValue(str(command_move))
                    self.attr_SetPoint_read = 0
                        
                else:
                    print("The expected position ", expected_position, " is not among the range from ", int(self.attr_SoftwareCcwLimit_read), " to ", int(self.attr_SoftwareCwLimit_read))
            else:
                print("Check Device State please.")
        #----- PROTECTED REGION END -----#	//	CopleyControl.Move
        

    #----- PROTECTED REGION ID(CopleyControl.programmer_methods) ENABLED START -----#
    def connectSerial(self):    
        """ 
        Connects with the pyserial device and make the pyserial state be open.
        """
        print "In ", self.get_name(), "::connectSerial()"
        try:
            dev = PyTango.DeviceProxy(self.ConnectedDeviceName)            
            if dev.State() == PyTango.DevState.OFF:
                dev.Open()
                return dev
            elif dev.State() == PyTango.DevState.ON:
                return dev
            else:
                print("Device State of pyserial tango device Unknown")
        except:
            print("An exception with connecting the pyserial tango device occurred. ")      
        
 
    
    def get_state(self):
        """ 
        Get the device state using Event Status command.
        """

        command_DriveEventStatus = self.getParameterCommand("0xa0")  
        DriveEventStatus = self.getValue(command_DriveEventStatus)
        if DriveEventStatus == 'No power':
            argout = PyTango.DevState.OFF
        elif str(int(DriveEventStatus)) == "0":
            argout = PyTango.DevState.STANDBY      
        elif str(int(DriveEventStatus)) != "0":
            self.clearLatchedStatus()
            value = int(self.readLatchedEventStatus())
            if int(value) == int(DriveEventStatus):  
                if (value&512)<>0:
                    argout = PyTango.DevState.ALARM
                    print("Positive limit switch is active")  
                elif (value&67108864)<>0:
                    argout = PyTango.DevState.STANDBY
                    print("motor2 rest status")
                elif (value&1024)<>0:
                    argout = PyTango.DevState.ALARM
                    print("Negative limit switch is active")
                elif (value&2048)<>0:
                    argout = PyTango.DevState.STANDBY
                    print("Enable input not active")  
                elif (value&65536)<>0:
                    argout = PyTango.DevState.STANDBY
                    print("Enable input not active")       
                elif (value&131072)<>0:
                    argout = PyTango.DevState.STANDBY
                    print("Something unknown stays")
                elif (value&134217728)<>0:
                    argout = PyTango.DevState.MOVING
                    print("Error")
              
            else:
                argout = PyTango.DevState.MOVING
                print("State is MOVING")    
        else:
            argout = PyTango.DevState.FAULT
        self.set_state(argout)
        return argout
    def checkLimit(self):
        """
        Check the Hardware limit switches.
        """
        self.clearLatchedStatus()
        value = self.readLatchedEventStatus()
        if (int(value)&1536)<>0: 
            return 3
            print("Positive and Negative limit switches are active")
        elif (int(value)&512)<>0:
            return 1
            print("Positive limit switch is active")     
        elif (int(value)&1024)<>0:
            return 2 
            print("Negative limit switch is active")  
        elif int(value) == 0 or (int(value)&131072)<>0 or (int(value)&65536)<>0 or (int(value)&67108864)<>0:  
            return 0
            print("NO limit switch is active")       
                    
   
    def checkHomeStatus(self):
        """
        Check the Home Switch status.
        """
        self.clearLatchedStatus()
        value = self.readLatchedEventStatus()
        print("LatchedEventStatus: {}".format(value))
        if (int(value)&67108864)<>0:             
            print("Home Switch is active.")
            return 1
        else:            
            print("Home Switch is not active.")     
            return 0
            
            
    def setHomeParameters(self, homingMethod):
        """
        Set the Homing parameters using the input Homing method value
        """
        HomeOffset = self.attr_HomeOffset_read 
        command_DesiredState = self.setParameterCommand("0x24", int(self.DesiredState))  
        command_homingMethod = self.setParameterCommand("0xc2", homingMethod)  
        command_FastVelocity = self.setParameterCommand("0xc3", self.ReferenceVelocity)  
        command_SlowVelocity = self.setParameterCommand("0xc4", 3333)        
        command_Acceleration = self.setParameterCommand("0xc5", self.ReferenAcceleration)   
        command_homeOffset = self.setParameterCommand("0xc6", int(HomeOffset))   
        command_CurrentLimit= self.setParameterCommand("0xc7", 19)        
        command_TrajectoryProfileMode = self.setParameterCommand( "0xc8", int(self.ProfileType))     
        command_PositiveSoftwareLimit = self.setParameterCommand( "0xb8", self.attr_SoftwareCwLimit_read)        
        command_NegativeSoftwareLimit= self.setParameterCommand( "0xb9", self.attr_SoftwareCcwLimit_read)        
        #command_Position = self.setParameterCommand("0xca", 0)
        command_homing = str(self.NodeId) + " t 2 "
        
        return command_homing
    
    def setMoveParameters(self):
        """ 
        Sets Programmed Position Mode, Trajectory Profile Mode, position, velocity, acceleration, deceleration.       
        """
        print "In ", self.get_name(), "::setMoveParameters()"
       
        command_state = self.setParameterCommand( "0x24", int(self.DesiredState))
        command_profile = self.setParameterCommand( "0xc8", int(self.ProfileType))
        command_pos = self.setParameterCommand( "0xca", int(self.attr_SetPoint_read))
        command_vel = self.setParameterCommand( "0xcb", int(self.attr_Velocity_read))
        command_acc = self.setParameterCommand( "0xcc", int(self.attr_Acceleration_read))
        command_dec = self.setParameterCommand( "0xcd", int(self.attr_Deceleration_read))
        command = command_state + command_profile + command_vel + command_acc + command_dec + command_pos
        self.write(command)
        
    def readLatchedEventStatus(self):
        """
        return the latched event status
        """
        return int(self.getValue(str(self.NodeId) + " g r0xa1"))
    
    def clearLatchedStatus(self):
        """
        Clear the latched status
        """
        value = self.getValue(str(self.NodeId) + " g r0xa1")
        command = str(self.NodeId) + " s r0xa1 " + str(int(value))
        self.getValue(str(command))   
 
    def setParameterCommand(self, command, data):
        """ 
        Return the Set Command with nodeID, command and data for copley control.
        """
        return '{} s r{} {}\n'.format(str(int(self.NodeId)), command, str(int(data)))
            
    def getParameterCommand(self, command):
        """ 
        Return the Get Command with nodeID, command for copley control
        """
        return '{} g r{}\n'.format(str(int(self.NodeId)), command)
    
    def getValue(self, command):
        """
        Get the mathematical value of the answer after sending the command.
        """
        reply = self.WriteRead(command)
        if self.handshake(reply):
            if reply[0:1] == 'v':          
                argout = str(reply[2:])
                return argout
            else:
                
                return reply
                pass
        else:
            print "In ", self.get_name(), "::::handshake() ERROR"
    
    def handshake(self, reply):
        """
        Check the reply to confirm whether the command is sent successfully or not.
        """
       
        if reply == "No power" or "ok" or reply[0:1] == "e" or reply[0:1] == "v ":   
            return True           
        else:
            return False
        
    def write(self, command):
        """
        Write command to the serial line.
        """
        #print "In ", self.get_name(), "::::::write()"
        dev = self.dev_serial    
        dev.Close()
        dev.Open() 
        dev.Write(command)
        
    def setInitParameters(self):
        print "In ", self.get_name(), "::setInitParameters()"
        dev = self.dev_serial 
        command_DesiredState = self.setParameterCommand("0x24", int(self.DesiredState))  
        command_ProfileType = self.setParameterCommand( "0xc8", int(self.ProfileType))     
        command_Velocity = self.setParameterCommand("0xcb", int(self.ReferenceVelocity))   
        command_Acceleration = self.setParameterCommand("0xcc", int(self.ReferenceAcceleration))        
        command_Deceleration = self.setParameterCommand("0xcd", int(self.ReferenceDeceleration))  
        command = command_DesiredState + command_ProfileType + command_Velocity + command_Acceleration + command_Deceleration
        answer1 = self.getValue(command_DesiredState)
        answer2 = self.getValue(command_ProfileType)
        answer3 = self.getValue(command_Velocity)
        answer4 = self.getValue(command_Acceleration)
        answer5 = self.getValue(command_Deceleration)

        if answer1 == answer2 == answer3 == answer4 == answer5 and answer1 == "ok\n":
            print "In ", self.get_name(), "::setInitParameters() OK"
        else: 
           
            print "In ", self.get_name(), "::setInitParameters() ERROR"
              
    def setHomeMethod(self, argin):
        """
        Set the homeMethod, return the answer
        """

        if int(argin) == 512:  
            ans = self.getValue(str(self.NodeId) + " s r0xc2 " + str(int(argin)))
            argout = "The current position is the home position."
            print("The current position is the home position.")
        elif int(argin) in [514, 530]:
            print("Home Switch method is chosen to be Homing method.")
            if self.checkHomeStatus():
                print("Home Switch is ON")
                argout = "Home Switch is ON"
            elif self.checkHomeStatus()  == 0:
                print("Home Switch is OFF")
                ans = self.getValue(str(self.NodeId) + " s r0xc2 " + str(int(argin)))
                argout = "Home Switch method is chosen"
        elif int(argin) == 513:
            print("Positive Limit Switch method is chosen to be Homing method.")
            if self.checkLimit() == 3:
                print("Limit Switches are ON")
                argout = "Limit Switches are ON"
            elif self.checkLimit()  == 1:
                argout = "Positive Limit Switch is ON"
            else:
                ans = self.getValue(str(self.NodeId) + " s r0xc2 " + str(int(argin)))
                argout = "Positive Limit Switch method is chosen"
        elif int(argin) == 529:  
            print("Negative Limit Switch method is chosen to be Homing method.")
            if self.checkLimit() == 3:
                print("Limit Switches are ON")
                argout = "Limit Switches are ON"
            elif self.checkLimit()  == 2:
                argout = "Negative Limit Switch is ON"
            else:
                ans = self.getValue(str(self.NodeId) + " s r0xc2 " + str(int(argin)))
                argout = "Negative Limit Switch method is chosen"
        elif int(argin) == 516:
            print("Positive Hard Stop method is chosen to be Homing method.")
            if self.attr_CwLimit_read:
                print "Positive Hard Stop is ON"
                argout = "Positive Hard Stop is ON"
            else:
                ans = self.getValue(str(self.NodeId) + " s r0xc2 " + str(int(argin)))
                argout = "Positive Hard Stop method is chosen"
        elif int(argin) == 532:  
            print("Negative Hard Stop method is chosen to be Homing method.")
            if self.attr_CcwLimit_read:
                print("Negative Hard Stop is ON")
                argout = "Negative Hard Stop is ON"

            else:
                ans = self.getValue(str(self.NodeId) + " s r0xc2 " + str(int(argin)))
                print("Negative Hard Stop method is chosen")
                argout = "Negative Hard Stop method is chosen"
        else:
            ans = self.getValue(str(self.NodeId) + " s r0xc2 " + str(int(argin)))
            argout = "Homing Method is set"
            print("Homing Method is set")
        return ans

         
        
    #----- PROTECTED REGION END -----#	//	CopleyControl.programmer_methods

class CopleyControlClass(PyTango.DeviceClass):
    # -------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(CopleyControl.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	CopleyControl.global_class_variables


    #    Class Properties
    class_property_list = {
        'Description':
            [PyTango.DevString, 
             '',
            [] ],
        }


    #    Device Properties
    device_property_list = {
        'NodeId':
            [PyTango.DevShort, 
             '',
            [] ],
        'ConnectedDeviceName':
            [PyTango.DevString, 
             '',
            [] ],
        'ReferenceVelocity':
            [PyTango.DevDouble, 
             '',
            [15000]],
        'DesiredState':
            [PyTango.DevLong, 
             '',
            [] ],
        'ProfileType':
            [PyTango.DevLong, 
             '',
            [] ],
        'ReferenceAcceleration':
            [PyTango.DevDouble, 
             '',
            [2000000]],
        'ReferenceDeceleration':
            [PyTango.DevDouble, 
             '',
            [2000000]],
        }


    #    Command definitions
    cmd_list = {
        'StopMove':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'ResetMotor':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'WriteRead':
            [[PyTango.DevString, "none"],
            [PyTango.DevString, "none"]],
        'MoveToCwLimit':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevLong, "none"]],
        'MoveToCcwLimit':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevLong, "none"]],
        'MoveHome':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevString, "none"]],
        'Move':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        }


    #    Attribute definitions
    attr_list = {
        'Acceleration':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true"
            } ],
        'Deceleration':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true"
            } ],
        'Position':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true_without_hard_applied"
            } ],
        'SetPoint':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true_without_hard_applied"
            } ],
        'Velocity':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true"
            } ],
        'DialPosition':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true_without_hard_applied"
            } ],
        'Conversion':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true_without_hard_applied"
            } ],
        'SoftwareCwLimit':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true_without_hard_applied"
            } ],
        'SoftwareCcwLimit':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true_without_hard_applied"
            } ],
        'SoftwareCwDialLimit':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true_without_hard_applied"
            } ],
        'SoftwareCcwDialLimit':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true_without_hard_applied"
            } ],
        'HomeOffset':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true_without_hard_applied"
            } ],
        'CwLimit':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'CcwLimit':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'HomingMethod':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(CopleyControlClass, CopleyControl, 'CopleyControl')
        #----- PROTECTED REGION ID(CopleyControl.add_classes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	CopleyControl.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:', e)
    except Exception as e:
        print ('-------> An unforeseen exception occured....', e)

if __name__ == '__main__':
    main()
